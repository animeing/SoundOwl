name: MariaDB Initial SQL Test

on:
  push:
  pull_request:

jobs:
  test-mariadb:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10.5
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_db

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Wait for MariaDB to be ready
      run: |
        retries=60  # Increase retries for MariaDB readiness
        while [ $retries -gt 0 ]; do
          if docker exec $(docker ps -q -f name=mariadb) mysqladmin ping -uroot -proot_password --silent; then
            echo "MariaDB is up and running!"
            break
          fi
          echo "Waiting for MariaDB to be ready..."
          sleep 5  # Retry every 5 seconds
          retries=$((retries - 1))
        done
        if [ $retries -eq 0 ]; then
          echo "MariaDB did not become ready in time."
          docker logs $(docker ps -q -f name=mariadb)
          exit 1
        fi

    - name: Apply initial SQL
      run: |
        docker exec -i $(docker ps -q -f name=mariadb) mysql -uroot -proot_password test_db < parts/setup/db/soundowl_table_mysql.sql

    - name: Verify tables
      run: |
        # soundowl_table_mysql.sqlからCREATE TABLE文のテーブル名を抽出
        expected_tables=($(grep -oP '^CREATE TABLE `\K[^`]+(?=`)' parts/setup/db/soundowl_table_mysql.sql))
        actual_tables=$(docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -N -e "SHOW TABLES;")
        echo "Expected Tables: ${expected_tables[*]}"
        echo "Actual Tables: $actual_tables"
        for tbl in "${expected_tables[@]}"; do
          echo "$actual_tables" | grep -wq "$tbl"
          if [ $? -ne 0 ]; then
            echo "Table $tbl is missing!" >&2
            exit 1
          fi
        done
        echo "All expected tables exist: ${expected_tables[*]}"

    - name: Verify procedures
      run: |
        # soundowl_table_mysql.sqlからCREATE PROCEDURE文のプロシージャ名を抽出（バッククォート有無両対応）
        expected_procs=($(grep -oP '^CREATE PROCEDURE (?:`)?\K\w+' parts/setup/db/soundowl_table_mysql.sql))
        actual_procs=$(docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -N -e "SHOW PROCEDURE STATUS WHERE Db = 'test_db';" | awk '{print $2}')
        echo "Expected Procedures: ${expected_procs[*]}"
        echo "Actual Procedures: $actual_procs"
        for proc in "${expected_procs[@]}"; do
          echo "$actual_procs" | grep -wq "$proc"
          if [ $? -ne 0 ]; then
            echo "Procedure $proc is missing!" >&2
            exit 1
          fi
        done
        echo "All expected procedures exist: ${expected_procs[*]}"

    - name: Verify events
      run: |
        # soundowl_table_mysql.sqlからCREATE EVENT文のイベント名を抽出（IF NOT EXISTS・バッククォート有無両対応）
        expected_events=($(grep -oP '^CREATE EVENT (?:IF NOT EXISTS )?(?:`)?\K\w+' parts/setup/db/soundowl_table_mysql.sql))
        actual_events=$(docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -N -e "SHOW EVENTS;" | awk 'NR>1{print $2}')
        echo "Expected Events: ${expected_events[*]}"
        echo "Actual Events: $actual_events"
        for evt in "${expected_events[@]}"; do
          echo "$actual_events" | grep -wq "$evt"
          if [ $? -ne 0 ]; then
            echo "Event $evt is missing!" >&2
            exit 1
          fi
        done
        echo "All expected events exist: ${expected_events[*]}"

    - name: Verify triggers
      run: |
        # soundowl_table_mysql.sqlからCREATE TRIGGER文のトリガー名を抽出（バッククォート有無両対応）
        expected_triggers=($(grep -oP '^CREATE TRIGGER (?:`)?\K\w+' parts/setup/db/soundowl_table_mysql.sql))
        actual_triggers=$(docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -N -e "SHOW TRIGGERS;" | awk '{print $1}')
        for trg in "${expected_triggers[@]}"; do
          echo "$actual_triggers" | grep -wq "$trg"
          if [ $? -ne 0 ]; then
            echo "Trigger $trg is missing!" >&2
            exit 1
          fi
        done
        echo "All expected triggers exist: ${expected_triggers[*]}"

    - name: Verify views
      run: |
        # soundowl_table_mysql.sqlからCREATE VIEW文のビュー名を抽出（バッククォート有無両対応）
        expected_views=($(grep -oP '^CREATE VIEW (?:`)?\K\w+' parts/setup/db/soundowl_table_mysql.sql))
        actual_views=$(docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -N -e "SHOW FULL TABLES WHERE Table_type = 'VIEW';" | awk '{print $1}')
        for vw in "${expected_views[@]}"; do
          echo "$actual_views" | grep -wq "$vw"
          if [ $? -ne 0 ]; then
            echo "View $vw is missing!" >&2
            exit 1
          fi
        done
        echo "All expected views exist: ${expected_views[*]}"

    - name: Run manage_partitions_and_compact_ids procedure
      run: |
        docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -e "CALL manage_partitions_and_compact_ids();"

    - name: Verify partitions
      run: |
        docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -e "SELECT PARTITION_NAME FROM INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_SCHEMA = 'test_db' AND TABLE_NAME = 'sound_play_history';"

    - name: Verify ID compaction
      run: |
        docker exec $(docker ps -q -f name=mariadb) mysql -uroot -proot_password -D test_db -e "SELECT * FROM sound_play_history ORDER BY id;"
